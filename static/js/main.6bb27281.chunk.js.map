{"version":3,"sources":["components/Logo/Logo.tsx","components/PageErrorBoundary.tsx","layouts/DefaultLayout.tsx","components/App/App.tsx","serviceWorker.ts","index.tsx","components/Logo/logo.svg"],"names":["Logo","to","className","alt","width","height","src","logo","PageErrorBoundary","props","state","hasError","message","error","errorInfo","console","componentStack","this","status","title","subTitle","children","React","Component","DefaultLayout","style","minHeight","Header","defaultOpenKeys","theme","mode","Item","key","Content","padding","Footer","textAlign","Date","getFullYear","href","target","rel","Index","lazy","About","NotFound","App","fallback","icon","spinning","exact","path","component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","log","onUpdate","onSuccess","catch","render","document","getElementById","URL","process","origin","addEventListener","fetch","headers","response","contentType","get","indexOf","ready","unregister","reload","checkValidServiceWorker","module","exports"],"mappings":"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","file":"static/js/main.6bb27281.chunk.js","sourcesContent":["import React, { ReactElement } from 'react'\nimport { Link } from 'react-router-dom'\nimport 'src/components/Logo/Logo.css'\nimport logo from './logo.svg'\n\nexport function Logo(): ReactElement {\n  return (\n    <Link to={'/'} className={'logo'}>\n      <img alt={'Hiberbee'} width={32} height={32} src={logo} />\n      <span>Hiberbee</span>\n    </Link>\n  )\n}\n","import React from 'react'\nimport { Result } from 'antd'\n\ntype Props = {\n  children?: React.ReactNode\n}\n\ntype State = {\n  hasError: boolean\n  message: string\n}\n\nexport default class PageErrorBoundary extends React.Component<Props, State> {\n  constructor(props: Props) {\n    super(props)\n    this.state = { hasError: false, message: '' }\n  }\n\n  static getDerivedStateFromError(error: Error): State {\n    // Update state so the next render will show the fallback UI.\n    return { hasError: true, message: error.message }\n  }\n\n  componentDidCatch(error: Error, errorInfo: React.ErrorInfo): void {\n    // You can also log the error to an error reporting service\n    console.error(`${error.message} @ ${errorInfo.componentStack}`)\n  }\n\n  render(): React.ReactNode {\n    if (this.state.hasError) {\n      return (\n        <Result\n          status={'500'}\n          title={'This page encountered error. Try something again'}\n          subTitle={this.state.message}\n        />\n      )\n    }\n\n    return this.props.children\n  }\n}\n","import React from 'react'\nimport { Layout, Menu } from 'antd'\nimport { Link } from 'react-router-dom'\nimport { Logo } from 'src/components/Logo/Logo'\nimport PageErrorBoundary from 'src/components/PageErrorBoundary'\n\ntype Props = { children?: React.ReactNode }\n\nexport default function DefaultLayout(props: Props): React.ReactElement {\n  return (\n    <Layout style={{ minHeight: '100vh' }}>\n      <Layout.Header>\n        <Menu defaultOpenKeys={['search']} theme={'dark'} mode={'horizontal'}>\n          <Menu.Item key={'search'}>\n            <Link to=\"/\">Search</Link>\n          </Menu.Item>\n          <Menu.Item key={'api'}>\n            <Link to=\"/api\">API</Link>\n          </Menu.Item>\n          <Menu.Item key={'plugins'}>\n            <Link to=\"/plugins\">Plugins</Link>\n          </Menu.Item>\n        </Menu>\n        <Logo />\n      </Layout.Header>\n      <Layout.Content style={{ padding: 20 }}>\n        <PageErrorBoundary>{props.children}</PageErrorBoundary>\n      </Layout.Content>\n      <Layout.Footer style={{ textAlign: 'center' }}>\n        Hiberbee Â© {new Date().getFullYear()}. Open-source @{' '}\n        <a href=\"https://github.com/hiberbee/template-typescript-react-ant\" target={'_blank'} rel=\"noopener noreferrer\">\n          Github\n        </a>\n      </Layout.Footer>\n    </Layout>\n  )\n}\n","import React, { lazy, ReactElement, Suspense } from 'react'\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom'\nimport { ConfigProvider, Result, Spin } from 'antd'\nimport DefaultLayout from 'src/layouts/DefaultLayout'\nimport 'src/components/App/App.css'\n\nconst Index = lazy(() => import('../../routes/Search'))\nconst About = lazy(() => import('../../routes/About'))\nconst NotFound = lazy(() => import('../../routes/NotFound'))\n\nexport function App(): ReactElement {\n  return (\n    <ConfigProvider>\n      <Router>\n        <DefaultLayout>\n          <Suspense fallback={<Result title={'Loading page...'} icon={<Spin spinning={true} />} />}>\n            <Switch>\n              <Route exact path=\"/\" component={Index} />\n              <Route exact path=\"/about\" component={About} />\n              <Route component={NotFound} />\n            </Switch>\n          </Suspense>\n        </DefaultLayout>\n      </Router>\n    </ConfigProvider>\n  )\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config): void {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config): void {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config): void {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.')\n    })\n}\n\nexport function unregister(): void {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister()\n      })\n      .catch(error => {\n        console.error(error.message)\n      })\n  }\n}\n","import React from 'react'\nimport { render } from 'react-dom'\nimport { App } from 'src/components/App/App'\nimport { register } from 'src/serviceWorker'\n\nrender(\n  // FIXME: https://github.com/ant-design/ant-design/issues/22493\n  // <React.StrictMode>\n  <App />,\n  // </React.StrictMode>,\n  document.getElementById('root'),\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nregister()\n","module.exports = __webpack_public_path__ + \"static/media/logo.1d2148f8.svg\";"],"sourceRoot":""}